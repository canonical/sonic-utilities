{% from "common.j2" import cli_name -%}
""" Autogenerated show CLI plugin """

import click
import tabulate
import natsort
import utilities_common.cli as clicommon

{% macro print_attr(attr) %}
{%- if not attr["is-leaf-list"] %}
entry.get("{{ attr.name }}", "N/A")
{%- else %}
"\n".join(entry.get("{{ attr.name }}", []))
{%- endif %}
{% endmacro %}


{% macro gen_header(attrs) %}
{% for attr in attrs %}
"{{ attr.name|upper|replace("_", " ")|replace("-", " ") }}",
{% endfor %}
{% endmacro %}


{% for table in tables %}
{% if "static-objects" in table %}
@click.group(name="{{ cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }}"""

    pass

{% for object in table["static-objects"] %}
@{{ table.name }}.command(name="{{ cli_name(object.name) }}")
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}(db):
    """ {{ object.description }} """

    header = [{{ gen_header(object.attrs) }}]
    body = []

    table = db.cfgdb.get_table("{{ table.name }}")
    entry = table.get("{{ object.name }}", {})
    row = [{%- for attr in object.attrs -%} {{ print_attr(attr) }}, {%- endfor %}]
    body.append(row)
    click.echo(tabulate.tabulate(body, header))

{% endfor %}
{% elif "dynamic-objects" in table %}
{% if table["dynamic-objects"]|length > 1 %}
@click.group(name="{{ cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }} """

    pass
{% endif %}
{% for object in table["dynamic-objects"] %}
{# Generate another nesting group in case table holds two types of objects #}
{% if table["dynamic-objects"]|length > 1 %}
{% set group = table.name %}
{% set name = object.name %}
{% else %}
{% set group = "click" %}
{% set name = table.name %}
{% endif %}

@{{ group }}.group(name="{{ cli_name(name) }}",
             cls=clicommon.AliasedGroup,
             invoke_without_command=True)
@clicommon.pass_db
def {{ name }}(db):
    """ {{ object.description }} """

    header = [{{ gen_header(object["keys"] + object.attrs) }}]
    body = []

    table = db.cfgdb.get_table("{{ table.name }}")
    for key in natsort.natsorted(table):
        entry = table[key]
        if not isinstance(key, tuple):
            key = (key,)

        row = [*key, {%- for attr in object.attrs -%} {{ print_attr(attr) }}, {%- endfor %}]
        body.append(row)

    click.echo(tabulate.tabulate(body, header))
{% endfor %}
{% endif %}
{% endfor %}

def register(cli):
{%- for table in tables %}
    cli_node = {{ table.name }}
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command({{ table.name }})
{%- endfor %}
