{% from "common.j2" import cli_name -%}
""" Autogenerated show CLI plugin """

import click
import tabulate
import natsort
import utilities_common.cli as clicommon


{% macro column_name(name) -%}
{{ name|upper|replace("_", " ")|replace("-", " ") }}
{%- endmacro %}


def print_attr_helper(entry, attr):
    if attr["is-leaf-list"]:
        return "\n".join(entry.get(attr["name"], []))
    return entry.get(attr["name"], "N/A")


def print_group_helper(entry, attrs):
    data = []
    for attr in attrs:
        if entry.get(attr["name"]):
            data.append((attr["name"] + ":", print_attr_helper(entry, attr)))
    return tabulate.tabulate(data, tablefmt="plain")


{% macro gen_row(entry, attrs) -%}
[
{%- for attr in attrs|rejectattr("group", "defined") %}
print_attr_helper({{ entry }}, {{ attr }}),
{%- endfor %}
{%- for group, attrs in attrs|selectattr("group", "defined")|groupby("group") %}
print_group_helper({{ entry }}, {{ attrs }}),
{%- endfor %}
]
{% endmacro %}

{% macro gen_header(attrs) -%}
[
{% for attr in attrs|rejectattr("group", "defined") %}
"{{ column_name(attr.name) }}",
{% endfor %}
{% for group, attrs in attrs|selectattr("group", "defined")|groupby("group") %}
"{{ column_name(group) }}",
{% endfor %}
]
{% endmacro %}


{% for table in tables %}
{% if "static-objects" in table %}
@click.group(name="{{ cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }}"""

    pass

{% for object in table["static-objects"] %}
@{{ table.name }}.command(name="{{ cli_name(object.name) }}")
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}(db):
    """ {{ object.description }} """

    header = {{ gen_header(object.attrs) }}
    body = []

    table = db.cfgdb.get_table("{{ table.name }}")
    entry = table.get("{{ object.name }}", {})
    row = {{ gen_row("entry", object.attrs) }}
    body.append(row)
    click.echo(tabulate.tabulate(body, header))

{% endfor %}
{% elif "dynamic-objects" in table %}
{% if table["dynamic-objects"]|length > 1 %}
@click.group(name="{{ cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }} """

    pass
{% endif %}
{% for object in table["dynamic-objects"] %}
{# Generate another nesting group in case table holds two types of objects #}
{% if table["dynamic-objects"]|length > 1 %}
{% set group = table.name %}
{% set name = object.name %}
{% else %}
{% set group = "click" %}
{% set name = table.name %}
{% endif %}

@{{ group }}.group(name="{{ cli_name(name) }}",
             cls=clicommon.AliasedGroup,
             invoke_without_command=True)
@clicommon.pass_db
def {{ name }}(db):
    """ {{ object.description }} """

    header = {{ gen_header(object["keys"] + object.attrs) }}
    body = []

    table = db.cfgdb.get_table("{{ table.name }}")
    for key in natsort.natsorted(table):
        entry = table[key]
        if not isinstance(key, tuple):
            key = (key,)

        row = [*key] + {{ gen_row("entry", object.attrs) }}
        body.append(row)

    click.echo(tabulate.tabulate(body, header))
{% endfor %}
{% endif %}
{% endfor %}

def register(cli):
{%- for table in tables %}
    cli_node = {{ table.name }}
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command({{ table.name }})
{%- endfor %}
