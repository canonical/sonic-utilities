#! /usr/bin/python

import swsssdk
import sys
import re
import types
from tabulate import tabulate
from natsort import natsorted
from swsssdk import ConfigDBConnector
from pprint import pprint

import os

# mock the redis for unit test purposes #
try:
    if os.environ["UTILITIES_UNIT_TESTING"] == "1":
        modules_path = os.path.join(os.path.dirname(__file__), "..")
        tests_path = os.path.join(modules_path, "sonic-utilities-tests")
        sys.path.insert(0, modules_path)
        sys.path.insert(0, tests_path)
        import mock_tables.dbconnector
except KeyError:
    pass

# ========================== Common gearbox-utils logic ==========================

GEARBOX_TABLE_PHY_PREFIX = "_GEARBOX_TABLE:phy:{}"
GEARBOX_TABLE_INTERFACE_PREFIX = "_GEARBOX_TABLE:interface:{}"
GEARBOX_TABLE_PORT_PREFIX = "_GEARBOX_TABLE:phy:{}:ports:{}"

PORT_TABLE_ETHERNET_PREFIX = "PORT_TABLE:{}"

ASIC_STATE_TABLE_PORT_PREFIX = "ASIC_STATE:SAI_OBJECT_TYPE_PORT:oid:{}"
ASIC_STATE_TABLE_SWITCH_PREFIX = "ASIC_STATE:SAI_OBJECT_TYPE_SWITCH:oid:{}"
ASIC_GEARBOX_TABLE_SWITCH_PREFIX = "ASIC_GEARBOX|MISC_SAI_SWITCH_ATTR:{}"

PHY_NAME = "name"
PHY_ID = "phy_id"
PHY_OID = "phy_oid"
PHY_FIRMWARE_MAJOR_VERSION = "SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION"
PHY_LINE_LANES = "line_lanes"
PHY_SYSTEM_LANES = "system_lanes"

PORT_OPER_STATUS = "oper_status"
PORT_ADMIN_STATUS = "admin_status"
PORT_SYSTEM_SPEED = "system_speed"
PORT_LINE_SPEED = "line_speed"

INTF_NAME = "name"
INTF_LANES = "lanes"
INTF_SPEED = "speed"

def get_appl_key_attr(db, key, attr, lane_count=1):
    """
    Get APPL_DB key attribute
    """

    val = db.get(db.APPL_DB, key, attr)
    if val is None:
        return "N/A"

    if "speed" in attr:

        if val == "0":
            return "N/A"

        speed = int(val[:-3])

        if (speed % lane_count == 0):
            speed = speed / lane_count
        else:
            return "N/A"
            
        val = '{}G'.format(str(speed))

    return val

def get_asic2_key_attr(asic_db, phy_oid, attr):
    """
    Get the phy attribute
    """

    full_table_id = ASIC_GEARBOX_TABLE_SWITCH_PREFIX.format(phy_oid)
    # Replace needed for mock_table unit testing
    full_table_id = full_table_id.replace("ATTR:0", "ATTR:oid:0")
    val = asic_db.get(asic_db.ASIC_DB2, full_table_id, attr)
    if val is None:
        return "N/A"

    return val

def db_connect_asic2():
    asic_db = swsssdk.SonicV2Connector(host='127.0.0.1')
    if asic_db is None:
        return None
    asic_db.connect(asic_db.ASIC_DB2)
    return asic_db

def db_connect_appl():
    appl_db = swsssdk.SonicV2Connector(host='127.0.0.1')
    if appl_db is None:
        return None
    appl_db.connect(appl_db.APPL_DB)
    return appl_db

def db_connect_state():
    """
    Connect to REDIS STATE DB and get optics info
    """
    state_db = swsssdk.SonicV2Connector(host='127.0.0.1')
    if state_db is None:
        return None
    state_db.connect(state_db.STATE_DB, False)   # Make one attempt only
    return state_db

def appl_db_keys_get(appl_db):
    """
    Get APPL_DB Keys
    """
    return appl_db.keys(appl_db.APPL_DB, GEARBOX_TABLE_PHY_PREFIX.format("*"))

def appl_db_interface_keys_get(appl_db):
    """
    Get ASIC_DB Keys
    """
    return appl_db.keys(appl_db.APPL_DB, GEARBOX_TABLE_INTERFACE_PREFIX.format("*"))

def asic2_db_keys_get(asic_db):
    """
    Get ASIC_DB Keys
    """
    return asic_db.keys(asic_db.ASIC_DB2, ASIC_GEARBOX_TABLE_SWITCH_PREFIX.format("*"))

# ========================== phy-status logic ==========================

phy_header_status = ['PHY Id', 'Name', 'Firmware']

class PhyStatus(object):

    def display_phy_status(self, appl_db_keys, asic_db_keys):
        """
        Generate phy status output
        """
        table = []
        key = []

        for key in appl_db_keys:
            if 'lanes' in key or 'ports' in key:
                continue
            list_items = key.split(':')
            phy_id = list_items[2]
            phy_oid = get_appl_key_attr(self.appl_db, GEARBOX_TABLE_PHY_PREFIX.format(phy_id), PHY_OID)
            data_row = (
                phy_id,
                get_appl_key_attr(self.appl_db, GEARBOX_TABLE_PHY_PREFIX.format(phy_id), PHY_NAME),
                get_asic2_key_attr(self.asic_db, phy_oid, PHY_FIRMWARE_MAJOR_VERSION))

            table.append(data_row)

        # Sorting and tabulating the result table.
        sorted_table = natsorted(table)
        print tabulate(sorted_table, phy_header_status, tablefmt="simple", stralign='right')

    def __init__(self):

        self.asic_db = db_connect_asic2()
        self.appl_db = db_connect_appl()

        if self.asic_db is None:
            return
        if self.appl_db is None:
            return

        appl_db_keys = appl_db_keys_get(self.appl_db)
        if appl_db_keys is None:
            return

        asic_db_keys = asic2_db_keys_get(self.asic_db)
        if asic_db_keys is None:
            return

        self.display_phy_status(appl_db_keys, asic_db_keys)

# ========================== interface-status logic ==========================

intf_header_status = ['PHY Id', 'Interface', 'MAC Lanes', 'MAC Lane Speed', 'PHY Lanes', 'PHY Lane Speed', 'Line Lanes', 'Line Lane Speed', 'Oper', 'Admin']

class InterfaceStatus(object):

    def display_intf_status(self, appl_db_keys, asic_db_keys):
        """
        Generate phy status output
        """
        table = []
        key = []

        for key in appl_db_keys:
            list_items = key.split(':')
            index = list_items[2]
            
            name = get_appl_key_attr(self.appl_db, GEARBOX_TABLE_INTERFACE_PREFIX.format(index), INTF_NAME),
            name = name[0]
                        
            mac_lanes = get_appl_key_attr(self.appl_db, PORT_TABLE_ETHERNET_PREFIX.format(name), INTF_LANES)
            lanes = mac_lanes.split(',')
            lane_count = 0
            for lane in lanes:
                lane_count += 1
            
            mac_lane_speed = get_appl_key_attr(self.appl_db, PORT_TABLE_ETHERNET_PREFIX.format(name), INTF_SPEED, lane_count),

            phy_id = get_appl_key_attr(self.appl_db, GEARBOX_TABLE_INTERFACE_PREFIX.format(index), PHY_ID)
                        
            data_row = (
                phy_id,
                name,
                mac_lanes,
                get_appl_key_attr(self.appl_db, PORT_TABLE_ETHERNET_PREFIX.format(name), INTF_SPEED, lane_count),
                get_appl_key_attr(self.appl_db, GEARBOX_TABLE_INTERFACE_PREFIX.format(index), PHY_SYSTEM_LANES),
                get_appl_key_attr(self.appl_db, GEARBOX_TABLE_PORT_PREFIX.format(phy_id, index), PORT_SYSTEM_SPEED),
                get_appl_key_attr(self.appl_db, GEARBOX_TABLE_INTERFACE_PREFIX.format(index), PHY_LINE_LANES),
                get_appl_key_attr(self.appl_db, GEARBOX_TABLE_PORT_PREFIX.format(phy_id, index), PORT_LINE_SPEED),
                get_appl_key_attr(self.appl_db, PORT_TABLE_ETHERNET_PREFIX.format(name), PORT_OPER_STATUS),
                get_appl_key_attr(self.appl_db, PORT_TABLE_ETHERNET_PREFIX.format(name), PORT_ADMIN_STATUS))

            table.append(data_row)

        # Sorting and tabulating the result table.
        sorted_table = natsorted(table)
        print tabulate(sorted_table, intf_header_status, tablefmt="simple", stralign='right')

    def __init__(self):

        self.asic_db = db_connect_asic2()
        self.appl_db = db_connect_appl()

        if self.asic_db is None:
            return
        if self.appl_db is None:
            return

        appl_db_keys = appl_db_interface_keys_get(self.appl_db)
        if appl_db_keys is None:
            return

        asic_db_keys = asic2_db_keys_get(self.asic_db)
        if asic_db_keys is None:
            return

        self.display_intf_status(appl_db_keys, asic_db_keys)

def main(args):
    """
    phy status
    interfaces status
    interfaces counters
    """

    if len(args) == 0:
        print "No valid arguments provided"
        return

    cmd1 = args[0]
    if cmd1 != "phys" and cmd1 != "interfaces":
        print "No valid command provided"
        return

    cmd2 = args[1]
    if cmd2 != "status" and cmd2 != "counters":
        print "No valid command provided"
        return

    if cmd1 == "phys" and cmd2 == "status":
        PhyStatus()
    elif cmd1 == "interfaces" and cmd2 == "status":
        InterfaceStatus()

    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
