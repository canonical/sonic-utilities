#!/usr/bin/python3

"""
    Script to show MAC/FDB entries learnt in Hardware
    
    usage: fdbshow [-p PORT] [-v VLAN]
    optional arguments:
      -p,  --port              FDB learned on specific port: Ethernet0
      -v,  --vlan              FDB learned on specific Vlan: 1000
  
    Example of the output:
    admin@str~$ fdbshow
      No.    Vlan  MacAddress         Port        Type
    -----  ------  -----------------  ----------  -------
        1    1000  7C:FE:90:80:9F:05  Ethernet20  Dynamic
        2    1000  7C:FE:90:80:9F:10  Ethernet40  Dynamic
        3    1000  7C:FE:90:80:9F:01  Ethernet4   Dynamic
        4    1000  7C:FE:90:80:9F:02  Ethernet8   Dynamic
    Total number of entries 4
    admin@str:~$ fdbshow -p Ethernet4
      No.    Vlan  MacAddress         Port        Type
    -----  ------  -----------------  ---------   -------
        1    1000  7C:FE:90:80:9F:01  Ethernet4   Dynamic
    Total number of entries 1
    admin@str:~$ fdbshow -v 1001
    1001 is not in list

"""
import argparse
import json
import sys
import os

# mock the redis for unit test purposes #
try: # pragma: no cover
    if os.environ["UTILITIES_UNIT_TESTING"] == "1": 
        modules_path = os.path.join(os.path.dirname(__file__), "..")
        test_path = os.path.join(modules_path, "tests")
        sys.path.insert(0, modules_path)
        sys.path.insert(0, test_path)
        import mock_tables.dbconnector
        mock_variants = { "1": 'asic_db',
                          "2": 'asic_db_def_vlan',
                          "3": 'asic_db_no_fdb',
                          "4": 'asic_db_no_bridge',
                          "5": 'asic_db_fetch_except'}
        mock_db_path = os.path.join(test_path, "fdbshow_input")
        file_name = mock_variants[os.environ["FDBSHOW_MOCK"]]
        jsonfile_asic = os.path.join(mock_db_path, file_name)
        mock_tables.dbconnector.dedicated_dbs['ASIC_DB'] = jsonfile_asic
        jsonfile_counters = os.path.join(mock_db_path, 'counters_db')
        mock_tables.dbconnector.dedicated_dbs['COUNTERS_DB'] = jsonfile_counters
except KeyError: # pragma: no cover
    pass

from natsort import natsorted
from swsssdk import SonicV2Connector, port_util
#from swsscommon.swsscommon import SonicV2Connector
from tabulate import tabulate

class FdbShow(object):

    HEADER = ['No.', 'Vlan', 'MacAddress', 'Port', 'Type']
    FDB_COUNT = 0

    def __init__(self):
        super(FdbShow,self).__init__()
        self.db = SonicV2Connector(host="127.0.0.1")
        self.if_name_map, \
        self.if_oid_map = port_util.get_interface_oid_map(self.db)
        self.if_br_oid_map = port_util.get_bridge_port_map(self.db)
        self.fetch_fdb_data()
        return

    def fetch_fdb_data(self):
        """
            Fetch FDB entries from ASIC DB. 
            FDB entries are sorted on "VlanID" plus MAC addr, and stored as a list of tuples
        """
        self.db.connect(self.db.ASIC_DB)
        self.bridge_mac_list = []

        if not self.if_br_oid_map:
            return
        
        fdb_str = self.db.keys('ASIC_DB', "ASIC_STATE:SAI_OBJECT_TYPE_FDB_ENTRY:*")
        if not fdb_str:
            return

        bvid_tlb = {}
        oid_pfx = len("oid:0x")

        client = self.db.get_redis_client(self.db.ASIC_DB)
        pipe = client.pipeline()
        values = []
        fdb_list = []
        for s in fdb_str:
            fdb_entry = s
            fdb = json.loads(fdb_entry .split(":", 2)[-1])
            if not fdb:
                continue
            fdb_list.append(fdb)
            pipe.hgetall(s)
        values = pipe.execute()
        client = self.db.get_redis_client(self.db.ASIC_DB)
        pipe = client.pipeline()
        vlans = []
        vlan_keys = self.db.keys('ASIC_DB', "ASIC_STATE:SAI_OBJECT_TYPE_VLAN:*")
        for v in vlan_keys:
            pipe.hgetall(v)
        vlans = pipe.execute()

        posi = 0
        for ent in values:
            if 'SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID' not in ent:
                posi = posi + 1
                continue
            br_port_id = ent["SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID"][oid_pfx:]
            ent_type = ent["SAI_FDB_ENTRY_ATTR_TYPE"]
            fdb_type = ['Dynamic','Static'][ent_type == "SAI_FDB_ENTRY_TYPE_STATIC"]
            if (br_port_id not in self.if_br_oid_map):
                posi = posi + 1
                continue

            port_id = self.if_br_oid_map[br_port_id]

            #FIXME: When if_name not mapped to port_id in DB, using port_id as if_name in the display.
            try:
                if_name = self.if_oid_map[port_id]
            except Exception as e:
                if_name = port_id

            #FIXME: When VLAN Id for fdb entry not present in DB, then not displaying the fdb entry.
            if 'vlan' in fdb:
                vlan_id = fdb["vlan"]
            elif 'bvid' in fdb:
                try:
                    vlan_id  = vlans[vlan_keys.index("ASIC_STATE:SAI_OBJECT_TYPE_VLAN:{}".format(fdb_list[posi][u'bvid']))] ["SAI_VLAN_ATTR_VLAN_ID"]
                except Exception as e:
                    posi = posi + 1
                    continue

            self.bridge_mac_list.append((int(vlan_id),) + (fdb_list[posi]["mac"],) + (if_name,) + (fdb_type,))
            posi = posi + 1

        self.bridge_mac_list.sort(key = lambda x: (x[0], x[1]))
        return
    
    
    def get_iter_index(self, key_value, pos=0):
        """
            Get the starting index of matched entry
        """
        if pos != 0:
            self.bridge_mac_list = natsorted(self.bridge_mac_list, key = lambda x: x[pos])

        keys = [r[pos] for r in self.bridge_mac_list]
        return keys.index(key_value)


    def display(self, vlan, port):
        """
            Display the FDB entries for specified vlan/port.
            @todo: - PortChannel support
        """
        output = []

        if vlan is not None:
            vlan = int(vlan)
            s_index = self.get_iter_index(vlan)
            self.bridge_mac_list = [fdb for fdb in self.bridge_mac_list[s_index:]
                                    if fdb[0] == vlan]
        if port is not None:
            s_index = self.get_iter_index(port, 2)
            self.bridge_mac_list = [fdb for fdb in self.bridge_mac_list[s_index:]
                                    if fdb[2] == port]

        for fdb in self.bridge_mac_list:
            self.FDB_COUNT += 1
            output.append([self.FDB_COUNT, fdb[0], fdb[1], fdb[2], fdb[3]])

        print(tabulate(output, self.HEADER))
        print("Total number of entries {0} ".format(self.FDB_COUNT))


def main():
    
    parser = argparse.ArgumentParser(description='Display ASIC FDB entries',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-p', '--port', type=str, help='FDB learned on specific port: Ethernet0', default=None)
    parser.add_argument('-v', '--vlan', type=str, help='FDB learned on specific Vlan: 1001', default=None)
    args = parser.parse_args()

    try:
        fdb = FdbShow()
        fdb.display(args.vlan, args.port)
    except Exception as e:
        print(str(e))
        sys.exit(1)

if __name__ == "__main__": # pragma: no cover
    main()
