#!/usr/bin/env python3

############################################################################
#
# thresholdcfg is a tool for displaying queue and priority-group thresholds.
#
############################################################################

import argparse
import sys
import swsssdk
from swsssdk import ConfigDBConnector
from natsort import natsorted
from tabulate import tabulate

headerPg = ['Port', 'PG0', 'PG1', 'PG2', 'PG3', 'PG4', 'PG5', 'PG6', 'PG7']
headerUc = ['Port', 'UC0', 'UC1', 'UC2', 'UC3', 'UC4', 'UC5', 'UC6', 'UC7']
headerMc = ['Port', 'MC0', 'MC1', 'MC2', 'MC3', 'MC4', 'MC5', 'MC6', 'MC7']
headerCpu = ['Queue', 'Percent']
headerBufferPool = ['Pool','threshold']


THRESHOLD_DEFAULT = 0

QUEUE_TYPE_MC = 'MC'
QUEUE_TYPE_UC = 'UC'
QUEUE_TYPE_ALL = 'ALL'
SAI_QUEUE_TYPE_MULTICAST = "SAI_QUEUE_TYPE_MULTICAST"
SAI_QUEUE_TYPE_UNICAST = "SAI_QUEUE_TYPE_UNICAST"
SAI_QUEUE_TYPE_ALL = "SAI_QUEUE_TYPE_ALL"

THRESHOLD_TABLE_PREFIX = "THRESHOLD_TABLE|"
THRESHOLD_BUFFERPOOL_TABLE_PREFIX = "THRESHOLD_BUFFERPOOL_TABLE|"

COUNTERS_PORT_NAME_MAP = "COUNTERS_PORT_NAME_MAP"
COUNTERS_QUEUE_NAME_MAP = "COUNTERS_QUEUE_NAME_MAP"
COUNTERS_QUEUE_TYPE_MAP = "COUNTERS_QUEUE_TYPE_MAP"
COUNTERS_QUEUE_INDEX_MAP = "COUNTERS_QUEUE_INDEX_MAP"
COUNTERS_QUEUE_PORT_MAP = "COUNTERS_QUEUE_PORT_MAP"
COUNTERS_PG_NAME_MAP = "COUNTERS_PG_NAME_MAP"
COUNTERS_PG_PORT_MAP = "COUNTERS_PG_PORT_MAP"
COUNTERS_PG_INDEX_MAP = "COUNTERS_PG_INDEX_MAP"
COUNTERS_BUFFER_POOL_NAME_MAP = "COUNTERS_BUFFER_POOL_NAME_MAP"


class Thresholdcfg(object):

    def __init__(self):
        # connect COUNTER DB
        self.counters_db = swsssdk.SonicV2Connector(host='127.0.0.1')
        self.counters_db.connect(self.counters_db.COUNTERS_DB)

        # connect APP DB
        self.config_db = ConfigDBConnector()
        self.config_db.connect()

        self.num_uc_queues = 0

        def get_queue_type(table_id):
            queue_type = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_TYPE_MAP, table_id)
            if queue_type is None:
                print("Queue Type is not available!", table_id)
                sys.exit(1)
            elif queue_type == SAI_QUEUE_TYPE_MULTICAST:
                return QUEUE_TYPE_MC

            elif queue_type == SAI_QUEUE_TYPE_UNICAST:
                return QUEUE_TYPE_UC
            elif queue_type == SAI_QUEUE_TYPE_ALL:
                return QUEUE_TYPE_ALL
            else:
                print("Queue Type is invalid:", table_id, queue_type)
                sys.exit(1)

        def get_queue_port(table_id):
            port_table_id = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_PORT_MAP, table_id)
            if port_table_id is None:
                print("Port is not available!", table_id)
                sys.exit(1)

            return port_table_id

        def get_pg_port(table_id):
            port_table_id = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_PG_PORT_MAP, table_id)
            if port_table_id is None:
                print("Port is not available!", table_id)
                sys.exit(1)

            return port_table_id

        # Get all ports
        self.counter_port_name_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_PORT_NAME_MAP)
        if self.counter_port_name_map is None:
            print("COUNTERS_PORT_NAME_MAP is empty!")
            sys.exit(1)

        self.port_uc_queues_map = {}
        self.port_mc_queues_map = {}
        self.port_pg_map = {}
        self.port_name_map = {}

        for port in self.counter_port_name_map:
            self.port_uc_queues_map[port] = {}
            self.port_mc_queues_map[port] = {}
            self.port_pg_map[port] = {}
            self.port_name_map[self.counter_port_name_map[port]] = port

        # Get Queues for each port
        counter_queue_name_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_NAME_MAP)
        if counter_queue_name_map is None:
            print("COUNTERS_QUEUE_NAME_MAP is empty!")
            sys.exit(1)

        for queue in counter_queue_name_map:
            port = self.port_name_map[get_queue_port(counter_queue_name_map[queue])]
            if get_queue_type(counter_queue_name_map[queue]) == QUEUE_TYPE_UC:
                self.port_uc_queues_map[port][queue] = counter_queue_name_map[queue]

            elif get_queue_type(counter_queue_name_map[queue]) == QUEUE_TYPE_MC:
                self.port_mc_queues_map[port][queue] = counter_queue_name_map[queue]

        # Get PGs for each port
        counter_pg_name_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_PG_NAME_MAP)
        if counter_pg_name_map is None:
            print("COUNTERS_PG_NAME_MAP is empty!")
            sys.exit(1)

        for pg in counter_pg_name_map:
            port = self.port_name_map[get_pg_port(counter_pg_name_map[pg])]
            self.port_pg_map[port][pg] = counter_pg_name_map[pg]

        for queue in counter_queue_name_map:
            port = self.port_name_map[get_queue_port(counter_queue_name_map[queue])]
            if port == 'CPU':
                continue
            self.num_uc_queues = len(self.port_uc_queues_map[port])
            break

        self.threshold_types = {
            "pg_headroom": {"message": "Ingress headroom threshold per PG:",
                           "obj_map": self.port_pg_map,
                           "idx_func": self.get_pg_index,
                           "th_name": "threshold",
                           "header": headerPg},
            "pg_shared": {"message": "Ingress shared pool threshold per PG:",
                          "obj_map": self.port_pg_map,
                          "idx_func": self.get_pg_index,
                          "th_name": "threshold",
                          "header": headerPg},
            "q_shared_uni": {"message": "Egress shared pool threshold per unicast queue:",
                            "obj_map": self.port_uc_queues_map,
                            "idx_func": self.get_queue_index,
                            "th_name": "threshold",
                            "header": headerUc},
            "q_shared_multi": {"message": "Egress shared pool threshold per multicast queue:",
                            "obj_map": self.port_mc_queues_map,
                            "idx_func": self.get_queue_index,
                            "th_name": "threshold",
                            "header": headerMc},
            "q_shared_multi_cpu": {"message": "Egress shared pool threshold per CPU queue:",
                            "obj_map": self.port_mc_queues_map,
                            "idx_func": self.get_queue_index,
                            "th_name": "threshold",
                            "header": headerCpu},
            "buffer_pool_all": {"message": "Buffer pool threshold:",
                            "th_name": "threshold",
                            "header": headerBufferPool}
        }

    def get_queue_index(self, table_id):
        queue_index = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_INDEX_MAP, table_id)
        if queue_index is None:
            print("Queue index is not available!", table_id)
            sys.exit(1)

        return queue_index

    def get_pg_index(self, table_id):
        pg_index = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_PG_INDEX_MAP, table_id)
        if pg_index is None:
            print("Priority group index is not available!", table_id)
            sys.exit(1)

        return pg_index

    def get_counters(self, table_prefix, port, port_obj, idx_func, threshold, th_type):
        """
            Get the threshold from specific table.
        """

        fields = ["0"]*8
        if th_type == "q_shared_uni" or th_type == "q_shared_multi":
            fields = ["0"]*self.num_uc_queues

        elif th_type == "q_shared_multi_cpu":
            fields = ["0"]*48

        for name, obj_id in port_obj.items():
            pos = int(idx_func(obj_id)) % len(fields)
            full_table_id = table_prefix + port + '|' + str(pos)
            threshold_data = self.config_db.get(self.config_db.CONFIG_DB, full_table_id, threshold)

            if threshold_data is None:
                fields[pos] = THRESHOLD_DEFAULT
            elif fields[pos] != THRESHOLD_DEFAULT:
                fields[pos] = str(int(threshold_data))

        cntr = tuple(fields)
        return cntr

    def get_print_buffer_pool_threshold(self, table_prefix, type, th_type):
        table = []
        buffer_pool_name_to_oid_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_BUFFER_POOL_NAME_MAP)
        if buffer_pool_name_to_oid_map is None:
           print("Buffer pools are empty.Not created")
           return

        for buf_pool,buf_oid in natsorted(buffer_pool_name_to_oid_map.items()):
            key = table_prefix + buf_pool
            data = self.config_db.get(self.config_db.CONFIG_DB, key, "threshold")

            if data is None:
                data = 0
            table.append((buf_pool, data))
        print(tabulate(table, type["header"], tablefmt='simple', stralign='right'))
        return

    def get_print_cpu_queue_stat(self, table_prefix, type, th_type):
        table = []
        array_of_cpu = self.port_mc_queues_map["CPU"]
        for item in natsorted(array_of_cpu):
            queue = item.split(':')
            key = table_prefix + queue[1]
            data = self.config_db.get(self.config_db.CONFIG_DB, key, "threshold")
            if data is None:
               data = 0
            table.append((item, data))
        print(tabulate(table, type["header"], tablefmt='simple', stralign='right'))
        return

    def get_print_all_stat(self, table_prefix, type, th_type):
        # Get stat for each port
        table = []
        for port in natsorted(self.counter_port_name_map):
            data = self.get_counters(table_prefix, port,
                                     type["obj_map"][port], type["idx_func"], type["th_name"], th_type)
            table.append((port, data[0], data[1], data[2], data[3],
                        data[4], data[5], data[6], data[7]))
        print(tabulate(table, type["header"], tablefmt='simple', stralign='right'))
        return


def main():

    parser = argparse.ArgumentParser(description='Display the queue/pg thresholds',
                                      formatter_class=argparse.RawTextHelpFormatter,
                                      epilog="""
Examples:
  thresholdcfg -t pg_headroom
  thresholdcfg -t pg_shared
  thresholdcfg -t q_shared_uni
  thresholdcfg -t q_shared_multi
  thresholdcfg -t q_shared_multi_cpu
  thresholdcfg -t buffer_pool_all
""")

    parser.add_argument('-t', '--type', required=True, action='store',
                        choices=['pg_headroom', 'pg_shared', 'q_shared_uni', 'q_shared_multi', 'q_shared_multi_cpu', 'buffer_pool_all'],
                        help='The type of threshold')
    args = parser.parse_args()
    th_type = args.type

    thresholdcfg = Thresholdcfg()

    if th_type is not None:
        if th_type == "pg_shared":
            table_prefix = THRESHOLD_TABLE_PREFIX + "priority-group" + "|" + "shared" + "|"
        elif th_type == "pg_headroom":
            table_prefix = THRESHOLD_TABLE_PREFIX + "priority-group" + "|" + "headroom" + "|"
        elif th_type == "q_shared_uni":
            table_prefix = THRESHOLD_TABLE_PREFIX + "queue" + "|" + "unicast" + "|"
        elif th_type == "q_shared_multi":
            table_prefix = THRESHOLD_TABLE_PREFIX + "queue" + "|" + "multicast" + "|"
        elif th_type == "buffer_pool_all":
            table_prefix = THRESHOLD_BUFFERPOOL_TABLE_PREFIX
            thresholdcfg.get_print_buffer_pool_threshold(table_prefix, thresholdcfg.threshold_types[th_type], th_type)
            sys.exit(0)
        elif th_type == "q_shared_multi_cpu":
            table_prefix = THRESHOLD_TABLE_PREFIX + "queue" + "|" + "multicast" + "|"+ "CPU" + "|"
            thresholdcfg.get_print_cpu_queue_stat(table_prefix, thresholdcfg.threshold_types[th_type], th_type)
            sys.exit(0)

        thresholdcfg.get_print_all_stat(table_prefix, thresholdcfg.threshold_types[th_type], th_type)
    sys.exit(0)


if __name__ == "__main__":
    main()
