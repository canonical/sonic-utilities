"""
Autogenerated config CLI plugin.


"""

import click
import utilities_common.cli as clicommon
import utilities_common.general as general
from config import config_mgmt


# Load sonic-cfggen from source since /usr/local/bin/sonic-cfggen does not have .py extension.
sonic_cfggen = general.load_module_from_source('sonic_cfggen', '/usr/local/bin/sonic-cfggen')


def exit_with_error(*args, **kwargs):
    """ Print a message and abort CLI. """

    click.secho(*args, **kwargs)
    raise click.Abort()


def validate_config_or_raise(cfg):
    """ Validate config db data using ConfigMgmt """

    try:
        cfg = sonic_cfggen.FormatConverter.to_serialized(cfg)
        config_mgmt.ConfigMgmt().loadData(cfg)
    except Exception as err:
        raise Exception('Failed to validate configuration: {}'.format(err))


def add_entry_validated(db, table, key, data):
    """ Add new entry in table and validate configuration """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key in cfg[table]:
        raise Exception(f"{key} already exists")

    cfg[table][key] = data

    validate_config_or_raise(cfg)
    db.set_entry(table, key, data)


def update_entry_validated(db, table, key, data, create_if_not_exists=False):
    """ Update entry in table and validate configuration.
    If attribute value in data is None, the attribute is deleted.
    """

    cfg = db.get_config()
    cfg.setdefault(table, {})

    if create_if_not_exists:
        cfg[table].setdefault(key, {})

    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")

    for attr, value in data.items():
        if value is None and attr in cfg[table][key]:
            cfg[table][key].pop(attr)
        else:
            cfg[table][key][attr] = value

    validate_config_or_raise(cfg)
    db.set_entry(table, key, cfg[table][key])


def del_entry_validated(db, table, key):
    """ Delete entry in table and validate configuration """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")

    cfg[table].pop(key)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, None)


def add_list_entry_validated(db, table, key, attr, data):
    """ Add new entry into list in table and validate configuration"""

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].setdefault(attr, [])
    for entry in data:
        if entry in cfg[table][key][attr]:
            raise Exception(f"{entry} already exists")
        cfg[table][key][attr].append(entry)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, cfg[table][key])


def del_list_entry_validated(db, table, key, attr, data):
    """ Delete entry from list in table and validate configuration"""

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].setdefault(attr, [])
    for entry in data:
        if entry not in cfg[table][key][attr]:
            raise Exception(f"{entry} does not exist")
        cfg[table][key][attr].remove(entry)
    if not cfg[table][key][attr]:
        cfg[table][key].pop(attr)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, cfg[table][key])


def clear_list_entry_validated(db, table, key, attr):
    """ Clear list in object and validate configuration"""

    update_entry_validated(db, table, key, {attr: None})


@click.group(name="auto-techsupport",
             cls=clicommon.AliasedGroup)
def AUTO_TECHSUPPORT():
    """ AUTO_TECHSUPPORT part of config_db.json """

    pass


@AUTO_TECHSUPPORT.group(name="global",
                        cls=clicommon.AliasedGroup)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global(db):
    """  """

    pass


@AUTO_TECHSUPPORT_global.command(name="auto-invoke-ts")
@click.argument(
    "auto-invoke-ts",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_auto_invoke_ts(db, auto_invoke_ts):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "auto_invoke_ts": auto_invoke_ts,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


@AUTO_TECHSUPPORT_global.command(name="coredump-cleanup")
@click.argument(
    "coredump-cleanup",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_coredump_cleanup(db, coredump_cleanup):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "coredump_cleanup": coredump_cleanup,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


@AUTO_TECHSUPPORT_global.command(name="techsupport-cleanup")
@click.argument(
    "techsupport-cleanup",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_techsupport_cleanup(db, techsupport_cleanup):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "techsupport_cleanup": techsupport_cleanup,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


@AUTO_TECHSUPPORT_global.command(name="cooloff")
@click.argument(
    "cooloff",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_cooloff(db, cooloff):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "cooloff": cooloff,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


@AUTO_TECHSUPPORT_global.command(name="max-techsupport-size")
@click.argument(
    "max-techsupport-size",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_max_techsupport_size(db, max_techsupport_size):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "max_techsupport_size": max_techsupport_size,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


@AUTO_TECHSUPPORT_global.command(name="core-usage")
@click.argument(
    "core-usage",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_core_usage(db, core_usage):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "core_usage": core_usage,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


@AUTO_TECHSUPPORT_global.command(name="since")
@click.argument(
    "since",
    nargs=1,
    required=True,
)
@clicommon.pass_db
def AUTO_TECHSUPPORT_global_since(db, since):
    """  """

    table = "AUTO_TECHSUPPORT"
    key = "global"
    data = {
        "since": since,
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


def register(cli):
    cli_node = AUTO_TECHSUPPORT
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command(AUTO_TECHSUPPORT)
